summary(Wage)
Wage<-subset(Wage,select=-c(logwage))
inTrain<-createDataPartition(y=Wage$wage,p=0.7,
list=FALSE)
training<-Wage[inTrain,]
testing<-Wage[-inTrain,]
featurePlot(x=training("age","education","jobclass"),
y=training$wage)
data(Wage)
summary(Wage)
Wage<-subset(Wage,select=-c(logwage))
inTrain<-createDataPartition(y=Wage$wage,p=0.7,
list=FALSE)
training<Wage[inTrain,]
testing<-Wage[-inTrain,]
featurePlot(x=training("age","education","jobclass"),
y=training$wage)
featurePlot(x=training[,("age","education","jobclass")],
y=training$wage)
training<Wage[inTrain,]
testing<-Wage[-inTrain,]
featurePlot(x=training[,c("age","education","jobclass")],
y=training$wage)
names(training)
library(ISLR)
library(ggplot2)
library(caret)
data(Wage)
summary(Wage)
Wage<-subset(Wage,select=-c(logwage))
inTrain<-createDataPartition(y=Wage$wage,p=0.7,
list=FALSE)
training<Wage[inTrain,]
testing<-Wage[-inTrain,]
featurePlot(x=training[,c("age","education","jobclass")],
y=training$wage)
library(ISLR)
library(ggplot2)
library(caret)
data(Wage)
summary(Wage)
Wage<-subset(Wage,select=-c(logwage))
inTrain<-createDataPartition(y=Wage$wage,p=0.7,
list=FALSE)
training<-Wage[inTrain,]
testing<-Wage[-inTrain,]
featurePlot(x=training[,c("age","education","jobclass")],
y=training$wage)
training<-Wage[inTrain,]
testing<-Wage[-inTrain,]
featurePlot(x=training[,c("age","education","jobclass")],
y=training$wage)
featurePlot(x=training[,c("age","education","jobclass")],
y=training$wage,
plot="pairs")
data(iris)
library(ggplot2)
names(iris)
data(iris)
library(ggplot2)
names(iris)
inTrain <- createDataPartition(y=iris$Species, p = .7,list = FALSE)
trainIris<- iris[inTrain,]
testIris <-  iris[-inTrain,]
qplot(Petal.Width,Sepal.Width,colour=Species,data=trainIris)
modFit <- train(Species~., method="rpart",data=training)
print(modFit$finalModel)
data(iris)
library(ggplot2)
names(iris)
inTrain <- createDataPartition(y=iris$Species, p = .7,list = FALSE)
trainIris<- iris[inTrain,]
testIris <-  iris[-inTrain,]
qplot(Petal.Width,Sepal.Width,colour=Species,data=trainIris)
modFit <- train(Species~., method="rpart",data=training)
print(modFit$finalModel)
data(iris)
library(ggplot2)
names(iris)
inTrain <- createDataPartition(y=iris$Species, p = .7,list = FALSE)
trainIris<- iris[inTrain,]
testIris <-  iris[-inTrain,]
modFit <- train(Species~., method="rpart",data=training)
print(modFit$finalModel)
modFit <- train(Species~., method="rpart",data=trainIris)
print(modFit$finalModel)
install.packages("rattle")
plot(modFit$finalModel, uniform=TRUE,
main="Classification Tree")
text(modFit$finalModel,use.n=TRUE,all=TRUE,cex=0.8)
qplot(Petal.Width,Sepal.Width,colour=Species,data=trainIris)
fancyRpartPlot(modFit$finalModel)
library(rattle)
fancyRpartPlot(modFit$finalModel)
predict(modFit,newdata=testIris)
confusionMatrix(testIris$Species,predict(modFit,newdata=testIris))
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
set.seed(125)
head(segmentationOriginal)
data<- segmentationOriginal
set.seed(125)
inTrain <- createDataPartition(y=data$Cases, p = .7,list = FALSE)
train_data<- data[inTrain,]
test_data <-  data[-inTrain,]
head(data)
names(data)
data<- segmentationOriginal
set.seed(125)
inTrain <- createDataPartition(y=data$Case, p = .7,list = FALSE)
train_data<- data[inTrain,]
test_data <-  data[-inTrain,]
qplot(TotalIntench2, FiberWidthCh1,colour=Case,data=data)
qplot(TotalIntenCh2, FiberWidthCh1,colour=Case,data=data)
qplot(TotalIntenCh2, FiberWidthCh1,colour=Case,data=train_data)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
S_data<- segmentationOriginal
set.seed(125)
inTrain <- createDataPartition(y=S_data$Case, p = .7,list = FALSE)
train_data<- S_data[inTrain,]
test_data <-  S_data[-inTrain,]
qplot(TotalIntenCh2, FiberWidthCh1,colour=Case,data=train_data)
train_data$Case
names(data)
qplot(TotalIntenCh2, FiberWidthCh1,colour=Class,data=train_data)
qplot(TotalIntenCh2, VarIntenCh4,colour=Class,data=train_data)
qplot(FiberWidthCh1, VarIntenCh4,colour=Class,data=train_data)
modFit <- train(Class~., method="rpart",data=train_data)
fancyRpartPlot(modFit$finalModel)
confusionMatrix(test_data$Class,predict(modFit,newdata=test_data))
library(rattle)
fancyRpartPlot(modFit$finalModel)
modFit <- train(Class~., method="rpart",data=train_data)
fancyRpartPlot(modFit$finalModel)
confusionMatrix(test_data$Class,predict(modFit,newdata=test_data))
plot(modFit$finalModel, uniform=TRUE,
main="Classification Tree")
text(modFit$finalModel,use.n=TRUE,all=TRUE,cex=0.8)
train_data<- S_data[inTrain,c("TotalIntenCh2", "FiberWidthCh1","VarIntenCh4")]
test_data <-  S_data[-inTrain,c("TotalIntenCh2", "FiberWidthCh1","VarIntenCh4")]
qplot(TotalIntenCh2, FiberWidthCh1,colour=Class,data=train_data)
qplot(FiberWidthCh1, VarIntenCh4,colour=Class,data=train_data)
modFit <- train(Class~., method="rpart",data=train_data)
fancyRpartPlot(modFit$finalModel)
confusionMatrix(test_data$Class,predict(modFit,newdata=test_data))
train_data<- S_data[inTrain,c("TotalIntenCh2", "FiberWidthCh1","VarIntenCh4")]
test_data <-  S_data[-inTrain,c("TotalIntenCh2", "FiberWidthCh1","VarIntenCh4")]
qplot(TotalIntenCh2, FiberWidthCh1,colour=Class,data=train_data)
train_data<- S_data[inTrain,c("Class","TotalIntenCh2", "FiberWidthCh1","VarIntenCh4")]
test_data <-  S_data[-inTrain,c("Class","TotalIntenCh2", "FiberWidthCh1","VarIntenCh4")]
qplot(TotalIntenCh2, FiberWidthCh1,colour=Class,data=train_data)
qplot(FiberWidthCh1, VarIntenCh4,colour=Class,data=train_data)
modFit <- train(Class~., method="rpart",data=train_data[,-1])
fancyRpartPlot(modFit$finalModel)
modFit <- train(Class~., method="rpart",data=train_data[,-1])
modFit <- train(Class~., method="rpart",data=train_data)
confusionMatrix(test_data$Class,predict(modFit,newdata=test_data))
modFit <- train(train_out~., method="rpart",data=train_data)
train_data<- S_data[inTrain,c("TotalIntenCh2", "FiberWidthCh1","VarIntenCh4")]
test_data <-  S_data[-inTrain,c("TotalIntenCh2", "FiberWidthCh1","VarIntenCh4")]
train_out<-S_data[inTrain,"Class"]
test_out<-S_data[-inTrain,"Class"]
qplot(TotalIntenCh2, FiberWidthCh1,colour=Class,data=train_data)
qplot(FiberWidthCh1, VarIntenCh4,colour=Class,data=train_data)
modFit <- train(train_out~., method="rpart",data=train_data)
confusionMatrix(test_out,predict(modFit,newdata=test_data))
train_data<- S_data[inTrain,]
test_data <-  S_data[-inTrain,]
qplot(TotalIntenCh2, FiberWidthCh1,colour=Class,data=train_data)
qplot(FiberWidthCh1, VarIntenCh4,colour=Class,data=train_data)
modFit <- train(Class~., method="rpart",data=train_data)
fancyRpartPlot(modFit$finalModel)
confusionMatrix(Class,predict(modFit,newdata=test_data))
modFit$finalModel
fancyRpartPlot(modFit$finalModel)
data(iris)
library(ggplot2)
library(rattle)
names(iris)
inTrain <- createDataPartition(y=iris$Species, p = .7,list = FALSE)
trainIris<- iris[inTrain,]
testIris <-  iris[-inTrain,]
qplot(Petal.Width,Sepal.Width,colour=Species,data=trainIris)
modFit <- train(Species~., method="rpart",data=trainIris)
print(modFit$finalModel)
plot(modFit$finalModel, uniform=TRUE,
main="Classification Tree")
text(modFit$finalModel,use.n=TRUE,all=TRUE,cex=0.8)
fancyRpartPlot(modFit$finalModel)
confusionMatrix(testIris$Species,predict(modFit,newdata=testIris))
fancyRpartPlot(modFit$finalModel)
fancyRpartplot(modFit$finalModel)
fancyRpartPlot (modFit$finalModel)
library(rattle)
fancyRpartPlot (modFit$finalModel)
library("rpart.plot")
library(rpart.plot)
library(rpart)
fancyRpartPlot (modFit$finalModel)
library(Rpart)
modFit <- train(Class~., method="rpart",data=train_data)
plot(modFit$finalModel, uniform=TRUE,
main="Classification Tree")
text(modFit$finalModel,use.n=TRUE,all=TRUE,cex=0.8)
confusionMatrix(Class,predict(modFit,newdata=test_data))
modFit$finalModel
names(S_data)
modFit$finalModel
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
library(rattle)
S_data<- segmentationOriginal
set.seed(125)
inTrain <- createDataPartition(y=S_data$Case, p = .7,list = FALSE)
train_data<- S_data[inTrain,]
test_data <-  S_data[-inTrain,]
qplot(TotalIntenCh2, FiberWidthCh1,colour=Class,data=train_data)
qplot(FiberWidthCh1, VarIntenCh4,colour=Class,data=train_data)
modFit <- train(Class~., method="rpart",data=train_data)
plot(modFit$finalModel, uniform=TRUE,
main="Classification Tree")
text(modFit$finalModel,use.n=TRUE,all=TRUE,cex=0.8)
confusionMatrix(Class,predict(modFit,newdata=test_data))
confusionMatrix(test_data$Class,predict(modFit,newdata=test_data))
modFit$finalModel
set.seed(125)
inTrain <- createDataPartition(y=S_data$Case, p = .5,list = FALSE)
train_data<- S_data[inTrain,]
test_data <-  S_data[-inTrain,]
qplot(TotalIntenCh2, FiberWidthCh1,colour=Class,data=train_data)
qplot(FiberWidthCh1, VarIntenCh4,colour=Class,data=train_data)
modFit <- train(Class~., method="rpart",data=train_data)
plot(modFit$finalModel, uniform=TRUE,
main="Classification Tree")
text(modFit$finalModel,use.n=TRUE,all=TRUE,cex=0.8)
confusionMatrix(test_data$Class,predict(modFit,newdata=test_data))
unique(S_data$Case)
S_data<- segmentationOriginal
inTrain <- S_data=="Train"
train_data<- S_data[inTrain,]
test_data <-  S_data[-inTrain,]
qplot(TotalIntenCh2, FiberWidthCh1,colour=Class,data=train_data)
qplot(FiberWidthCh1, VarIntenCh4,colour=Class,data=train_data)
inTrain <- S_data$Case=="Train"
head(inTrain)
train_data<- S_data[inTrain,]
test_data <-  S_data[-inTrain,]
head(train_data)
length(train_data)
length(test_data)
length(S_dat)
length(S_data\)
length(S_data)
S_data$Case=="Train"
dim(S_data)
dim(train_data)
dim(test_data)
S_data<- segmentationOriginal
inTrain <- S_data$Case=="Train"
train_data<- S_data[inTrain,]
test_data <-  S_data[-inTrain,]
qplot(TotalIntenCh2, FiberWidthCh1,colour=Class,data=train_data)
qplot(FiberWidthCh1, VarIntenCh4,colour=Class,data=train_data)
qplot(TotalIntenCh2, FiberWidthCh1,colour=Class,data=train_data)
set.seed(125)
modFit <- train(Class~., method="rpart",data=train_data)
plot(modFit$finalModel, uniform=TRUE,
main="Classification Tree")
text(modFit$finalModel,use.n=TRUE,all=TRUE,cex=0.8)
confusionMatrix(test_data$Class,predict(modFit,newdata=test_data))
modFit$finalModel
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(ozone,package = "ElemStatLearn")
ozone<-ozone[order(ozone)]
head(ozone)
ozone<-ozone[order(ozone$ozone)]
head(ozone)
ozone<-ozone[order(ozone$ozone),]
head(ozone)
l1<-matrix(NA,nrow=10,ncol=155)
l1<-matrix(NA,nrow=10,ncol=155)
for (i in 1:10){
ss<-sample(1:dim(ozone)[1],replace = T)
ozone0<-ozone[ss,]
ozone0<-ozone0[order(ozone0$ozone),]
loess0<-loess(temperature~ozone,data=ozone0,span=0.2)
ll[i,]<-predict(loess0,newdata=data.frame(ozone=1:155))
}
ll<-matrix(NA,nrow=10,ncol=155)
for (i in 1:10){
ss<-sample(1:dim(ozone)[1],replace = T)
ozone0<-ozone[ss,]
ozone0<-ozone0[order(ozone0$ozone),]
loess0<-loess(temperature~ozone,data=ozone0,span=0.2)
ll[i,]<-predict(loess0,newdata=data.frame(ozone=1:155))
}
ll
mean(ll)
mean(complete.cases(ll)
)
head(ll)
dim(ozone)
plot(ozone$ozone,ozone$temperature,pch = 19, cex =0.5)
plot(ozone$ozone,ozone$temperature,pch = 19, cex =0.5)
for (i in 1:10){
lines(1:155,ll[i,],col="grey",lwd=2)
}
lines(1:155,apply(ll,2,mean),col="red",lwd=2)
# bag function
predictor <-data.frame(ozone=ozone$ozone)
temperature<-ozone$temperature
treebag<-bag(predictors,temperature,B=10,bagControl(fit = ctreeBag$fit,
predict = ctreeBag$pred,
aggregate = ctreeBag$aggregate))
treebag<-bag(predictors,temperature,B=10,
bagControl =bagControl(fit = ctreeBag$fit,
predict = ctreeBag$pred,
aggregate = ctreeBag$aggregate))
install.packages("party")
treebag<-bag(predictors,temperature,B=10,
bagControl =bagControl(fit = ctreeBag$fit,
predict = ctreeBag$pred,
aggregate = ctreeBag$aggregate))
library(party)
treebag<-bag(predictors,temperature,B=10,
bagControl =bagControl(fit = ctreeBag$fit,
predict = ctreeBag$pred,
aggregate = ctreeBag$aggregate))
treebag<-bag(predictors,temperature,B=10)
modFit <- train(Species~., method="rf",data=trainIris,prox=TRUE)
library(caret)
data(iris)
library(ggplot2)
library(rattle)
names(iris)
inTrain <- createDataPartition(y=iris$Species, p = .7,list = FALSE)
trainIris<- iris[inTrain,]
testIris <-  iris[-inTrain,]
modFit <- train(Species~., method="rf",data=trainIris,prox=TRUE)
modFit
getTree(modFit$finalModel,k=2)
irisP<- classCenter(training[,c(3,4)], training$Species, modFit$finalModel$prox)
modFit <- train(Species~., method="rf",data=trainIris,prox=TRUE)
irisP<- classCenter(training[,c(3,4)], training$Species, modFit$finalModel$prox)
irisP<- classCenter(trainIris[,c(3,4)], trainIris$Species, modFit$finalModel$prox)
irisP<- classCenter(trainIris[,c(3,4)], trainIris$Species, modFit$finalModel$prox)
irisP<- as.data.frame(irisP);irisP<-rownames(irisP)
p<-qplot(Petal.Width,Petal.Length,col=Species,data=trainIris)
p<-qplot(Petal.Width,Petal.Length,col=Species,data=trainIris)
p+geom(aes(x=Petal.Width,y=Petal.Length,col=Species),size=5,shape=4,data=irisP)
p<-qplot(Petal.Width,Petal.Length,col=Species,data=trainIris)
p+geom(aes(x=Petal.Width,y=Petal.Length,col=Species),size=5,shape=4,data=irisP)
p+geom_point(aes(x=Petal.Width,y=Petal.Length,col=Species),size=5,shape=4,data=irisP)
library(caret)
data(iris)
library(ggplot2)
library(rattle)
names(iris)
inTrain <- createDataPartition(y=iris$Species, p = .7,list = FALSE)
trainIris<- iris[inTrain,]
testIris <-  iris[-inTrain,]
modFit <- train(Species~., method="rf",data=trainIris,prox=TRUE)
irisP<- classCenter(trainIris[,c(3,4)], trainIris$Species, modFit$finalModel$prox)
irisP<- as.data.frame(irisP);irisP<-rownames(irisP)
p<-qplot(Petal.Width,Petal.Length,col=Species,data=trainIris)
p+geom_point(aes(x=Petal.Width,y=Petal.Length,col=Species),size=5,shape=4,data=irisP)
irisP
irisP
irisP<- as.data.frame(irisP);irisP$Species<-rownames(irisP)
p<-qplot(Petal.Width,Petal.Length,col=Species,data=trainIris)
p+geom_point(aes(x=Petal.Width,y=Petal.Length,col=Species),size=5,shape=4,data=irisP)
irisP
names(trainIris)
p<-qplot(Petal.Width,Petal.Length,col=Species,data=trainIris)
irisP<- classCenter(trainIris[,c(3,4)], trainIris$Species, modFit$finalModel$prox)
irisP
irisP<- as.data.frame(irisP);irisP$Species<-rownames(irisP)
p<-qplot(Petal.Width,Petal.Length,col=Species,data=trainIris)
p+geom_point(aes(x=Petal.Width,y=Petal.Length,col=Species),size=5,shape=4,data=irisP)
irisP
pred<-predict(modFit,testIris)
testIris$predRight<-pred==testIris$Species
table(pred,testIris$Species)
qplot(Petal.Width,Petal.Length,colour=predRight,data=testIris)
library(ISLR)
library(ggplot2)
library(caret)
data(Wage)
summary(Wage)
Wage<-subset(Wage,select=-c(logwage))
inTrain<-createDataPartition(y=Wage$wage,p=0.7,
list=FALSE)
training<-Wage[inTrain,]
testing<-Wage[-inTrain,]
modFit<-train(wage~.,method="gbm",data=training,verbose=FALSE)
modFit
qplot(predict(modFit,testing),wage,data=testing)
modlda<- train(Species~.,data = trainIris,method = "lda")
modnb <- train(Species~.,data = trainIris,method = "nv")
plda<-predit(modlda,testIris)
pnb<-predit(modnb,testIris)
table(plda,pnb)
# naive bayes
data(iris)
library(ggplot2)
library(rattle)
names(iris)
inTrain <- createDataPartition(y=iris$Species, p = .7,list = FALSE)
trainIris<- iris[inTrain,]
testIris <-  iris[-inTrain,]
modlda<- train(Species~.,data = trainIris,method = "lda")
modnb <- train(Species~.,data = trainIris,method = "nv")
plda<-predit(modlda,testIris)
pnb<-predit(modnb,testIris)
table(plda,pnb)
modlda<- train(Species~.,data = trainIris,method = "lda")
# naive bayes
data(iris)
library(ggplot2)
library(rattle)
library(carat)
names(iris)
inTrain <- createDataPartition(y=iris$Species, p = .7,list = FALSE)
trainIris<- iris[inTrain,]
testIris <-  iris[-inTrain,]
modlda<- train(Species~.,data = trainIris,method = "lda")
modnb <- train(Species~.,data = trainIris,method = "nb")
plda<-predit(modlda,testIris)
pnb<-predit(modnb,testIris)
table(plda,pnb)
plda<-predit(modlda,testIris)
shiny::runApp('C:/Users/Vivek/Desktop/coursera/devdataprod/PA')
shiny::runApp('C:/Users/Vivek/Desktop/coursera/devdataprod/PA')
shiny::runApp('C:/Users/Vivek/Desktop/coursera/devdataprod/PA')
shiny::runApp('C:/Users/Vivek/Desktop/coursera/devdataprod/PA')
shiny::runApp('C:/Users/Vivek/Desktop/coursera/devdataprod/PA')
shinyapps::setAccountInfo(name='vyb5b', token='BD59E0E9B89EF3CACCC65E313AF73810', secret='I9S1tTHTxw/kax47ZdTZSlkZLhArG7jRdQMCl5N7')
library(shinyapps)
install.packages("shinyapps")
library(shinyapps)
library(shiny)
library(shinyapps)
shinyapps::setAccountInfo(name='vyb5b', token='BD59E0E9B89EF3CACCC65E313AF73810', secret='I9S1tTHTxw/kax47ZdTZSlkZLhArG7jRdQMCl5N7')
setwd("C:/Users/Vivek/Desktop/coursera/devdataprod/PA")
shinyapps::setAccountInfo(name='vyb5b', token='BD59E0E9B89EF3CACCC65E313AF73810', secret='I9S1tTHTxw/kax47ZdTZSlkZLhArG7jRdQMCl5N7')
deployApp()
shinyapps::setAccountInfo(name='vyb5b', token='BD59E0E9B89EF3CACCC65E313AF73810', secret='I9S1tTHTxw/kax47ZdTZSlkZLhArG7jRdQMCl5N7')
install.packages(c('ggplot2', 'shiny'))
install.packages(c("ggplot2", "shiny"))
library(shiny)
shinyapps::setAccountInfo(name='vyb5b', token='BD59E0E9B89EF3CACCC65E313AF73810', secret='I9S1tTHTxw/kax47ZdTZSlkZLhArG7jRdQMCl5N7')
deployApp()
setwd("C:/Users/Vivek/Desktop/coursera/devdataprod/PA/tst")
runApp()
shinyapps::setAccountInfo(name='vyb5b', token='BD59E0E9B89EF3CACCC65E313AF73810', secret='I9S1tTHTxw/kax47ZdTZSlkZLhArG7jRdQMCl5N7')
library(shinyapps)
deployApp()
setwd("C:/Users/Vivek/Desktop/coursera/devdataprod/dataprod_PA")
shiny::runApp()
deployApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
setwd("C:/Users/Vivek/Desktop/coursera/DataProduct_PA")
shiny::runApp('C:/Users/Vivek/Desktop/coursera/devdataprod/dataprod_PA')
deployApp()
library(shinyapps)
deployApp()
library(slidify)
author("pitch_dataproduct")
1. Edit YAML front matter
pkgs <- c("slidify", "slidifyLibraries", "rCharts")
devtools::install_github(pkgs, "ramnathv", ref = "dev")
library(slidifyLibraries)
library(slidify)
library(rCharts)
setwd("C:/Users/Vivek/Desktop/coursera/DataProduct_PA/pitch_dataproduct")
slidify(index.Rmd)
slidify("index.Rmd")
browseURL("index.html")
install.packages("googleVis")
library(googleVis)
setwd("C:/Users/Vivek/Desktop/coursera/DataProduct_PA/pitch_dataproduct")
publish(user = "vxy10", repo = "DataProduct_pitch", host = 'github')
publish(user = "vxy10", repo = "DataProduct_pitch", host = 'github')
publish(user = "vxy10", repo = "DataProduct_pitch", host = 'github')
shiny::runApp('C:/Users/Vivek/Desktop/coursera/DataProduct_PA')
deployApp()
shiny::runApp('C:/Users/Vivek/Desktop/coursera/DataProduct_PA')
deployApp()
setwd("C:/Users/Vivek/Desktop/coursera/pitch_dataproduct")
library(slidify)
library(slidifyapps)
library(slidifyApps)
library(knitr)
setwd("C:/Users/Vivek/Desktop/coursera/pitch_dataproduct")
setwd("C:/Users/Vivek/Desktop/coursera/DataProduct_PA/pitch_dataproduct")
browseURL(index.html)
browseURL("index.html")
setwd("C:/Users/Vivek/Desktop/coursera/DataProduct_PA/pitch_dataproduct")
library(slidify)
library(shiny)
library(shinyapps)
publish(user = "vxy10", repo = "DataProduct_pitch")
